# PROGRAMS {{{
# (apparently "Return" must be capitalised):
## @description		Open terminal.
mod4 + Return
	x-terminal-emulator
## @description		Open terminal and attach to screen session.
mod4 + shift + Return
	x-terminal-emulator screen -x
## @description		Program launcher (direct to programs).
mod4 + space
	cmd="$(dmenu_path | dmenu)"; $cmd &
## @description		Program launcher (output run through $SHELL).
mod4 + shift + space
	dmenu_path | dmenu | $\{SHELL:-"/bin/sh"\} &
## @description		Open {browser,mail,screen painter,telegram}.
mod4 + a; {b,m,p,t}
	{x-www-browser,thunderbird,gromit-mpx,telegram-desktop}
## @description		Dmenu surfraw (qutebrowser), {skipping,not skipping} options.
mod4 + {_,shift + }d
	if wmctrl -lx | awk -v found=0 '$3 ~ /qutebrowser/ \{found=1; exit\} END \{exit found\}'; then \
		setsid qutebrowser & \
	fi; \
	env DO_FIELD_SPLIT=yes DO_SKIP_OPTIONS={yes,no} SURFRAW_browser=qutebrowser dmenu_surfraw 2>&1 | xargs -n1 -d'\n' notify-send -u critical -t 5000
## @description		Dmenu surfraw (firefox), {skipping,not skipping} options.
mod4 + {_,shift + }e
	if wmctrl -lx | awk -v found=0 '$3 ~ /Firefox/ \{found=1; exit\} END \{exit found\}'; then \
		setsid firefox & \
	fi; \
	env DO_FIELD_SPLIT=yes DO_SKIP_OPTIONS={yes,no} SURFRAW_browser=firefox dmenu_surfraw 2>&1 | xargs -n1 -d'\n' notify-send -u critical -t 5000
## @description		Execute dmenu scripts for convenience utilities: screenshot, series, flatpak runner, emojis.
mod4 + semicolon; {s,w,f,e}
	dmenu_{screenshot,series,flatpak_run,emoji}
## @description		Execute non-dmenu scripts for convenience utilities: calendar, pictures, magnifier, latex scratchpad.
mod4 + apostrophe; {d,p,z,l}
	{zenity --calendar --text='Current Month' \
	,sxiv -t ~/Pictures/ \
	,wmzoom \
	,latex_scratch \
	}
## @description		Watch video url in clipboard ({720p,1080p}).
mod4 + apostrophe; v; {1,2}
	clip="$(xclip -selection clipboard -o)"; \
	case $clip in \
		http?://*) \
			notify-send -t 1000 "Opening $clip"; \
			exec mpv --profile={720p,1080p} "$clip";; \
		*) \
			notify-send -t 5000 -u critical "'$clip' doesn't look like a URL";; \
	esac
## @description		Switch to some open graphical program.
mod4 + slash
	dmenu_switch_xprog
# }}}

# AUX {{{
## @description		Increase volume.
XF86AudioRaiseVolume
	pactl set-sink-volume @DEFAULT_SINK@ +10%
## @description		Decrease volume.
XF86AudioLowerVolume
	pactl set-sink-volume @DEFAULT_SINK@ -10%
## @description		Increase volume (more granular).
mod4 + XF86AudioRaiseVolume
	pactl set-sink-volume @DEFAULT_SINK@ +5%
## @description		Decrease volume (more granular).
mod4 + XF86AudioLowerVolume
	pactl set-sink-volume @DEFAULT_SINK@ -5%
## @description		Mute volume.
XF86AudioMute
	pactl set-sink-mute @DEFAULT_SINK@ toggle
## @description		Mute mic.
XF86AudioMicMute
	pactl set-source-mute @DEFAULT_SOURCE@ toggle
## @description		Move mouse to centre of focussed window or screen (if no window is there).
mod4 + Escape
	centre_mouse
# }}}

# NOTIFICATION {{{
## @description		Close {topmost notification,all notifications}.
mod4 + n; {_,shift +}w
	dunstctl close{_,-all}
## @description		Open context menu.
mod4 + n; c
	dunstctl context
## @description		Toggle notification daemon pause.
mod4 + n; p
	;dunstctl set-paused toggle; \
	dunstctl is-paused >"$DUNST_FIFO"
## @description		Display most recently closed notification.
mod4 + n; h
	dunstctl history-pop
# }}}

# META {{{
## @description		View keybinds in browser.
mod4 + shift + slash; k; w
	cfg_dir="$\{XDG_CONFIG_HOME:-$HOME/.config\}"; \
	outfile="$XDG_RUNTIME_DIR/sxhkd/keybinds.html"; \
	hkexport $(cat "$cfg_dir/sxhkd/PARSER-ARGS") --format html --expand >"$outfile"; \
	x-www-browser "$outfile"
## @description		View all keybinds.
mod4 + shift + slash; k; k
	cfg_dir="$\{XDG_CONFIG_HOME:-$HOME/.config\}"; \
	hkexport $(cat "$cfg_dir/sxhkd/PARSER-ARGS") --format txt --keybinds-only --expand | \
		dmenu -l 20 -i
## @description		Reload config for {bspwm,sxhkd,polybar,watchers}.
mod4 + shift + r; {b,s,p,w}
	cfg_dir="$\{XDG_CONFIG_HOME:-$HOME/.config\}"; \
	{"$cfg_dir/bspwm/bspwmrc",pkill -SIGUSR1 -x sxhkd; pkill -SIGUSR1 -x hkwatch,polybar-msg cmd restart; sleep 2; pkill -SIGUSR2 -x hkwatch,"$cfg_dir/bspwm/launch_watchers"}
## @description		Decide whether to log out, shut down, or restart computer.
mod4 + shift + x
	dmenu_powermenu
# }}}

# BSPWM {{{
## MISC. {{{
### @description		{Close (via X),Kill (via `kill` probably)} the focused window.
mod4 + {_,shift + }w
	bspc node -{c,k}
### @description		Alternate between the tiled and monocle layout.
mod4 + m
	bspc desktop -l next
### @description		By a {higher,lower} amount, {increase,decrease} the window gap (Prior=PageUp, Next=PageDown).
mod4 + {_,shift +}{Prior,Next}
	old="$(bspc config window_gap)"; \
	delta={4,2}; \
	new="$(( old {+,-} delta ))"; \
	[ "$new" -ge 0 ] && bspc config window_gap "$new"
### @description		Circulate nodes around current node (which must be internal) {forward,backward}.
mod4 + {x,z}
	bspc node -C {forward,backward}
### @description		Rotate tree around current node (which must be internal) {clockwise,counter-clockwise}.
mod4 + shift + {period,comma}
	bspc node -R {90,-90}
## }}}

## STATE/FLAGS {{{
### @description		Toggle fullscreen for the node.
mod4 + f
	bspc node -t ~fullscreen
### @description		Uniformly set the window state for the focused node and its descendants to '{tiled,pseudo_tiled,floating}'.
mod4 + {t,shift + t,s}
	: jq-1.6 docs for Debian Bullseye lied: recurse default is wrong.; \
	bspc query -T -n | jq -r 'recurse(.firstChild, .secondChild; . != null) | .id' | xargs -I id -n 1 bspc node id -t {tiled,pseudo_tiled,floating}
### @description		Uniformly toggle the '{marked,locked,sticky,private}' node flag for the focused node and its descendants.
mod4 + ctrl + {m,x,y,z}
	flag={marked,locked,sticky,private}; \
	newvalue="$(bspc query -T -n | jq -r "if .$flag then \"off\" else \"on\" end")"; \
	: jq-1.6 docs for Debian Bullseye lied: recurse default is wrong.; \
	bspc query -T -n | jq -r 'recurse(.firstChild, .secondChild; . != null) | .id' | xargs -I id -n 1 bspc node id -g $flag=$newvalue
### @description		Toggle the '{marked,locked,sticky,private}' node flag for the single node.
mod4 + alt + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}
## }}}

## FOCUS/SWAP {{{
### @description		{Focus,Swap} the node {to the left,down,up,to the right}.
mod4 + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}
### @description		Focus the next {urgent,marked} node across all monitors.
mod4 + {_,shift +}u
	bspc node -f next.{urgent,marked}
### @description		Focus the root node of the current desktop.
mod4 + shift + p
	bspc node -f @/
### @description		Focus the node's {parent,sibling,first child,second child}.
mod4 + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}
### @description		Focus the {next,previous} leaf node in the current desktop.
mod4 + {_,shift + }c
	bspc node -f {next,prev}.local.leaf
### @description		Focus the {previous,next} desktop in the current monitor.
mod4 + bracket{left,right}
	bspc desktop -f {prev,next}.local
### @description		Focus the {previous,next} occupied desktop in the current monitor.
mod4 + {minus,equal}
	bspc desktop -f {prev,next}.occupied.local
### @description		Focus the {previous,next} unoccupied desktop in the current monitor.
mod4 + shift + {minus,equal}
	bspc desktop -f {prev,next}.!occupied.local
### @description		Focus the {previous,next} monitor.
mod4 + shift + bracket{left,right}
	bspc monitor -f {prev,next}; bspc node -f local
### @description		Focus the last {node,desktop}.
mod4 + {grave,Tab}
	bspc {node,desktop} -f last
### @description		Focus the {older,newer} node in the focus history.
mod4 + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on
### @description		{Focus,Send the node to} desktop {1-9,10}.
mod4 + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'
### @description		Swap the current node and the biggest node {locally,globally}, *following* the original node.
mod4 + {_,shift + }g
	bspc node -s biggest{.local,_} --follow
### @description		Swap the current node and the biggest node {locally,globally}, *without* following the original node.
mod4 + {_,shift + }v
	: need to do this trickery because swapping nodes within desktops seems to follow the focussed node; \
	: still seems to be broken in version 0.9.10 of bspwm on Debian Bullseye; \
	swapnodeid="$(bspc query -N -n biggest{.local,_})"; \
	bspc wm -h off; \
	bspc node -s "$swapnodeid"; \
	bspc node -f "$swapnodeid"; \
	bspc wm -h on
## }}}

## PRESELECT {{{
### @description		Preselect {to the left,down,up,to the right}.
mod4 + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}
### @description		Set a 0.{1-9} splitting ratio for the preselection area.
mod4 + ctrl + {1-9}
	bspc node -o 0.{1-9}
### @description		Cancel the preselection for the focused node.
mod4 + ctrl + space
	bspc node -p cancel
### @description		Cancel the preselection for the focused desktop.
mod4 + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel
### @description		Send the newest marked node to the newest preselected node in {the current,any} desktop.
mod4 + {_,shift + }y
	bspc node newest.marked.local -n newest.!automatic{.local,_}
## }}}

## MOVE/RESIZE {{{
### @description		{Expand,Contract} the window in the {left,bottom,top,right,top-left,top-right,bottom-left,bottom-right} direction.
### @mode			resize
mod4 + r: {_,shift +}{h,j,k,l,y,u,b,n}
	action={expand,contract}; \
	dir={left,bottom,top,right,top_left,top_right,bottom_left,bottom_right}; \
	resizewindow $action $dir 20
### @description		Move floating window {left,down,up,right,up and left,up and right,down and left,down and right} (nethack, vi-keys 'yuhjklbn').
### @mode			move_floating
mod4 + shift + f: {h,j,k,l,y,u,b,n}
	bspc node -v {-20 0,0 20,0 -20,20 0,\
	              -20 -20,20 -20,-20 20,20 20}
## }}}

## MONITOR {{{
## @description			Set orientation of current monitor to {normal,inverted,left,right}.
## @mode			monitor
mod4 + shift + m: shift + {minus,backslash,comma,period}
	mon="$(bspc query -M -m --names)"; \
	xrandr --output "$mon" --rotate {normal,inverted,left,right}
## @description			Bubble the monitor to the {left,right}.
## @mode			monitor
mod4 + shift + m: bracket{left,right}
	bubblemonitor {left,right}
## }}}
# }}}
